memory_thresholds = (70.0, 90.0)

def humansize(nbytes):
    suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB']
    if nbytes == 0: return '0 B'
    i = 0
    while nbytes >= 1024 and i < len(suffixes)-1:
        nbytes /= 1024.
        i += 1
    f = ('%.2f' % nbytes).rstrip('0').rstrip('.')
    return '%s %s' % (f, suffixes[i])

def inventory_memory(info):
    inventory = []
    for line in info:
        inventory.append(("memory", memory_thresholds))
    return inventory

def check_memory(item, params, info):
    warn, crit = params
    for total_mem, avail_mem in info:
       used_mem = float(int(total_mem) - int(avail_mem)) * 1024
       avail_mem = float(avail_mem) * 1024
       total_mem = float(total_mem) * 1024
       warn_level = int(float(total_mem) * float(warn) / 100.0)
       crit_level = int(float(total_mem) * float(crit) / 100.0)
       perfdata = [("size", used_mem, warn_level, crit_level, 0, total_mem ) ]
       avail_mem_perc = round(float(float(avail_mem)/float(total_mem))*100.0,2)
       used_mem_perc = 100.0 - avail_mem_perc
       if float(used_mem_perc) > float(crit):
          return 2, "%s/%s (%s %%) memory used." %(humansize(used_mem), humansize(total_mem),str(used_mem_perc)), perfdata
       elif float(used_mem_perc) > float(warn):
          return 1, "%s/%s (%s %%) memory used." %(humansize(used_mem), humansize(total_mem),str(used_mem_perc)), perfdata
       else:
          return 0, "%s/%s (%s %%) memory used." %(humansize(used_mem), humansize(total_mem), str(used_mem_perc)), perfdata
    return (3, "Something weird happens")



check_info["memory"] = {
    "check_function"        : check_memory,
    "inventory_function"    : inventory_memory,
    "service_description"   : "%s usage",
    "snmp_info"             : ( ".1.3.6.1.4.1.2021.4", [ "5.0", "6.0" ] ),
    "has_perfdata"          : True,
}